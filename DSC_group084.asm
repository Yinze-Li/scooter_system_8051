	FMQ EQU P1.1			; Speaker
	RS EQU P1.5 			; circuit dependent EQUs
	RW EQU P1.6 			; EQU is an assembler directive 
	EN EQU P1.7 			; so these are not 8051 instructions 
	LCDDB EQU P0 
	LCDBF EQU P0.7 
MAIN:
	LCALL INIT
	LOOP_AWAIT_ACK:
		MOV R0, #0
		LCALL LCDINIT
		LCALL UART_READ_FROM_JAVA
		;MOV A, #10	;;;;
		CJNE A, #10, LOOP_AWAIT_ACK
		LCALL HINT	;Show enter ID on LCD
		LCALL LOWLN
		LCALL INPUT_QM_NUMBER
	JUMP_OUT_INPUT:
		LCALL CHECK_QM_INPUT_LEGALITY
	LCALL PICK_RETURN_AWAIT
	LJMP MAIN

INIT:
	CLR TF0
	CLR TF1
	CLR TR0
	CLR TR1
	CLR TI
	CLR RI
	SETB P1.0			;Turn off all LEDs
	SETB P1.2
	SETB P1.3
	SETB P1.4
	SETB P3.2
	SETB P3.3
	SETB P3.6
	SETB P3.7
	
	MOV R4, #0			;R4 stores a global variable coming from JAVA
	LCALL UART_INIT
    RET

PICK_RETURN_AWAIT:
	MOV R0, #26
	MOV R3, #60
	MOV R1, #0
	MOV R5, #0XFE	;To setup for LCD display
	LOOP_COUNTDOWN_60s:
		MOV TMOD, #21h
		MOV TL0, #0E2h
		MOV TH0, #0F1h
		SETB TR0
		DJNZ R5, LOOP_PRA
			LCALL CDOWN	;1s
			LCALL SPEAKER
			SETB FMQ
			LCALL LED_FLASH
			MOV R5,#0XFE	;1s
			DEC R3
	LOOP_PRA:
		LCALL KEYPAD_INPUT
		JNB TF0, $ 	; wait until timer overflows
		CLR TF0
		CLR TR0	
		CJNE R3,#0, LOOP_COUNTDOWN_60S
	CJNE R3,#0,MAIN
	MOV A, #0X63
	ACALL UART_SEND_TO_JAVA
	LJMP MAIN

CHECK_QM_INPUT_LEGALITY:
	ACALL DELAY
	ACALL UART_READ_FROM_JAVA
	;MOV A, #4		;;;;
	CJNE A, #9,LOOP_CQIL_STORE_A;Check if JAVA informs that QM number is wrong.
	LCALL WRONG_INPUT_QM_NUMBER
	LOOP_CQIL_STORE_A:
	MOV R4, A			;R4 stores a global variable coming from JAVA
    RET
	
INPUT_QM_NUMBER:
	MOV R4, #0			;R4 stores a global variable coming from JAVA
	ACALL KEYPAD_INPUT
	LJMP INPUT_QM_NUMBER		;To get out of the loop, BUTTON_CONFIRM must be pressed

WRONG_INPUT_QM_NUMBER:			;When receive ACK = 9 from JAVA
	MOV TMOD, #21h
	MOV TL0, #00h
	MOV TH0, #00h
	MOV R0, #9			;To locate the second language
	LCALL SPEAKER
	SETB FMQ
	LCALL HINT
	LCALL DELAY_FOR_LCD
	LJMP MAIN
    RET

UART_INIT:				;UART is a Protocol of serial transmission
	MOV TMOD, #20h 			; set timer 1 to auto-reload
	MOV TH1, #0FDh 			; set 9600 baud(@11.0592MHz)
	SETB TR1 			; start timer 1
	MOV SCON, #50h 			; set 8-bit data and Mode 1
    RET

UART_SEND_TO_JAVA:
	CLR TI				 ; clear transmit intr flag
	MOV SBUF, A			 ; put byte in SBUF
	JNB TI, $
	CLR TI			; wait till byte is sent
    RET 				; leave subroutine

UART_READ_FROM_JAVA:
	JNB RI, $ 			; poll receive intr flag
	MOV A, SBUF			 ; copy buffer
	CLR RI 				; clear receive intr flag
    RET 				; leave subroutine


KEYPAD_INPUT: 	
	MOV P2, #0F0h 			; set rows 1111 cols 0000
	MOV A, P2			 ; read back P1
	CJNE A, #0F0h, DECODE 		; decode if key pressed
    RET
DECODE:
	ACALL DELAY
	;MOV SP, #03Fh
	;MOV R4, #0  			;INITIALIZE FOR POP & PUSH
	
	MOV P2, #0FEh
	JNB P2.4, BUTTON1 
	JNB P2.5, CJNE_TO_BUTTON5
	JNB P2.6, CJNE_TO_BUTTON9
	
	MOV P2, #0FDh
	JNB P2.4, BUTTON2	
	JNB P2.5, CJNE_TO_BUTTON6 
	JNB P2.6, CJNE_TO_BUTTON0

	MOV P2, #0FBh
	JNB P2.4, BUTTON3	
	JNB P2.5, CJNE_TO_BUTTON7  	
	JNB P2.6, CJNE_TO_BUTTON_CONFIRM
	
	MOV P2, #0F7h
	JNB P2.4, CJNE_TO_BUTTON4
	JNB P2.5, CJNE_TO_BUTTON8
    RET
	CJNE_TO_BUTTON4:
	LCALL BUTTON4
	RET
	CJNE_TO_BUTTON5:
	LCALL BUTTON5
	RET
	CJNE_TO_BUTTON6:
	LCALL BUTTON6
	RET
	CJNE_TO_BUTTON7:
	LCALL BUTTON7
	RET
	CJNE_TO_BUTTON8:
	LCALL BUTTON8
	RET
	CJNE_TO_BUTTON9:
	LCALL BUTTON9
	RET
	CJNE_TO_BUTTON0:
	LCALL BUTTON0
	RET
	CJNE_TO_BUTTON_CONFIRM:
	LCALL BUTTON_CONFIRM
	RET
    
DELAY:
	MOV R2, #3
	LOOP_DELAY:
	CLR TF1
	CLR TR1
	MOV TMOD, #11h
	MOV TL1, #00h
	MOV TH1, #00h
	SETB TR1
	JNB TF1, $ 	; wait until timer overflows
	CLR TF1
	DJNZ R2, LOOP_DELAY
	LCALL UART_INIT
	RET

BUTTON1:
	MOV A,#1			;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON1_1
	LCALL DIGIT
	MOV A,#1
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON1_1:
	CJNE R4,#1,LOOP_BUTTON1_2
	LJMP RIGHT_BUTTON_PRESSED
	LOOP_BUTTON1_2:
	LCALL SPEAKER
	RET
BUTTON2:
	MOV A,#2		;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON2_1
	LCALL DIGIT	
	MOV A,#2
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON2_1:
	CJNE R4,#2,LOOP_BUTTON2_2
	LJMP RIGHT_BUTTON_PRESSED
	LOOP_BUTTON2_2:
	LCALL SPEAKER
	RET
BUTTON3:
	MOV A,#3			;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON3_1
	LCALL DIGIT
	MOV A,#3
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON3_1:
	CJNE R4,#3,LOOP_BUTTON3_2
	LJMP RIGHT_BUTTON_PRESSED
	LOOP_BUTTON3_2:
	LCALL SPEAKER
	RET
BUTTON4:
	MOV A,#4		;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON4_1
	LCALL DIGIT
	MOV A,#4
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON4_1:
	CJNE R4,#4,LOOP_BUTTON4_2
	LJMP RIGHT_BUTTON_PRESSED
	LOOP_BUTTON4_2:
	LCALL SPEAKER
	RET
BUTTON5:
	MOV A,#5		;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON5_1
	LCALL DIGIT
	MOV A,#5
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON5_1:
	CJNE R4,#5,LOOP_BUTTON5_2
	LJMP RIGHT_BUTTON_PRESSED
	LOOP_BUTTON5_2:
	LCALL SPEAKER
	RET

BUTTON6:
	MOV A,#6		;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON6_1
	LCALL DIGIT
	MOV A,#6
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON6_1:
	CJNE R4,#6,LOOP_BUTTON6_2
	LJMP RIGHT_BUTTON_PRESSED
	LOOP_BUTTON6_2:
	LCALL SPEAKER
	RET
BUTTON7:
	MOV A,#7	;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON7_1
	LCALL DIGIT
	MOV A,#7
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON7_1:
	CJNE R4,#7,LOOP_BUTTON7_2
	LJMP RIGHT_BUTTON_PRESSED
	LOOP_BUTTON7_2:
	LCALL SPEAKER
	RET
BUTTON8:
	MOV A,#8		;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON8_1
	LCALL DIGIT
	MOV A,#8
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON8_1:
	CJNE R4,#8,LOOP_BUTTON8_2
	LJMP RIGHT_BUTTON_PRESSED
	LOOP_BUTTON8_2:
	LCALL SPEAKER
	RET
BUTTON9:
	MOV A,#9
	LCALL DIGIT
	MOV A,#9			;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON9_1
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON9_1:
	LCALL SPEAKER
	RET
BUTTON0:
	MOV A,#0
	LCALL DIGIT
	MOV A,#0			;THE digital number OF CURRENT BUTTON
	CJNE R4, #0, LOOP_BUTTON0_1
	;LCALL DIGIT
	LCALL UART_SEND_TO_JAVA
	LOOP_BUTTON0_1:
	LCALL SPEAKER
	RET
BUTTON_CONFIRM:
	MOV A,#10			;THE digital number OF CURRENT BUTTON,10 is to inform that input is over
	CJNE R4,#0,LOOP_BUTTON_CONFIRM_1
	LCALL UART_SEND_TO_JAVA
	LCALL JUMP_OUT_INPUT
	LOOP_BUTTON_CONFIRM_1:
	LCALL SPEAKER
	RET

DELAY_FOR_LCD:
	MOV TMOD, #01h 
	MOV R5, #30			; set timer 0 mode 1
	LOOP_DELAY_FOR_LCD: 	
		MOV TL0, #0 		; timer low byte 0
		MOV TH0, #0 		; timer high byte 0
		SETB TR0 		; start timer 0
		JNB TF0, $		 ; wait until timer overflows
		CLR TR0 		; stop timer 0
		CLR TF0			; clear timer 0 flag
	DJNZ R5, LOOP_DELAY_FOR_LCD
	RET

RIGHT_BUTTON_PRESSED:			;When user presses the right button
	MOV A, #0X64
 	ACALL UART_SEND_TO_JAVA
 	MOV R0,#39
 	ACALL HINT
 	ACALL DELAY_FOR_LCD
	LJMP MAIN
 	RET

CJNE_TO_UART_SEND_TO_JAVA:		;To make CJNE jump to Farthur addresses
	LCALL UART_SEND_TO_JAVA
	RET

LED_FLASH:
	LOOP_LED1:
	CJNE R4, #1, LOOP_LED2
	CPL P1.0
	RET
	LOOP_LED2:
	CJNE R4, #2, LOOP_LED3
	CPL P1.2
	RET
	LOOP_LED3:
	CJNE R4, #3, LOOP_LED4
	CPL P1.3
	RET
	LOOP_LED4:
	CJNE R4, #4, LOOP_LED5
	CPL P1.4
	RET
	LOOP_LED5:
	CJNE R4, #5, LOOP_LED6
	CPL P3.2
	RET
	LOOP_LED6:
	CJNE R4, #6, LOOP_LED7
	CPL P3.3
	RET
	LOOP_LED7:
	CJNE R4, #7, LOOP_LED8
	CPL P3.6
	RET
	LOOP_LED8:
	CJNE R4, #8, LOOP_LED_OVER
	CPL P1.2
	LOOP_LED_OVER:
	RET

SPEAKER:
	CPL FMQ
	MOV R6, #5
	LOOP_SPEAKER:
	DELAY_SPEAKER:
	MOV R7,#200
	DLY:
	MOV R2,#20			;Time delay of SPEAKER
	DJNZ R2,$
	DJNZ R7,DLY
	DJNZ R6, LOOP_SPEAKER
	RET


LOWLN:	PUSH ACC
	MOV A, #0C0h ; cursor to (0,1) setDDRAM=40h
	ACALL COMNWRT
	POP ACC
	RET
	
DIGIT:	ADD A,#48
	ACALL DATAWRT
	RET

HINT:	ACALL LCDINIT
	MOV DPTR,#DB2
	ACALL LOOP
	RET

CDOWN:	ACALL HINT
	MOV B,R1
	MOV R0,B
	ACALL LOWLN
	MOV DPTR,#DB1
	ACALL LOOP
	MOV B,R0
	MOV R1,B
	MOV R0,#26
	RET

LOOP: 	MOV A, R0 ; lookup char from string 
	MOVC A, @A+DPTR
	INC R0
	JZ OUT ; finish when null char
PRINT: 	ACALL DATAWRT
	SJMP LOOP 
OUT: 	RET

DB1: 	DB '60',0,'59',0,'58',0,'57',0,'56',0,'55',0,'54',0,'53',0,'52',0,'51',0,'50',0,'49',0,'48',0,'47',0,'46',0,'45',0,'44',0,'43',0,'42',0,'41',0,'40',0,'39',0,'38',0,'37',0,'36',0,'35',0,'34',0,'33',0,'32',0,'31',0,'30',0,'29',0,'28',0,'27',0,'26',0,'25',0,'24',0,'23',0,'22',0,'21',0,'20',0,'19',0,'18',0,'17',0,'16',0,'15',0,'14',0,'13',0,'12',0,'11',0,'10',0,'9',0,'8',0,'7',0,'6',0,'5',0,'4',0,'3',0,'2',0,'1',0
DB2:	DB 'Enter ID',0,'Invalid ID,again',0,'Press button',0,'Success!',0

LCDINIT:MOV A, #38h ; 2 lines, 5x7, 8-bit
	ACALL COMNWRT ; send command 
	MOV A, #0Ch ; display ON 
	ACALL COMNWRT 
	MOV A, #06h ; addr auto-increment 
	ACALL COMNWRT 
	MOV A, #01h ; clear LCD 
	ACALL COMNWRT 
	MOV A, #80h ; set DDRAM=0 
	ACALL COMNWRT
	RET

COMNWRT:ACALL READY 
	MOV LCDDB, A 
	CLR RS 
	CLR RW 	
	SETB EN 
	NOP 
	CLR EN 
	RET
	
DATAWRT:ACALL READY 
	MOV LCDDB, A 
	SETB RS 
	CLR RW 
	SETB EN 
	NOP 
	CLR EN 
	RET
	
READY: 	PUSH 7 
	MOV LCDDB, #0FFh 
	MOV R7, #255    ;;;;
	CLR RS 
	SETB RW 
	SETB EN 
POLLBF: JNB LCDBF, POLLOK 
	DJNZ R7, POLLBF 
POLLOK: CLR EN 
	POP 7 
	RET

endd:	
	END
